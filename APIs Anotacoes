package.json:
    É o arquivo principal de qualquer projeto em Node.js. É utilizado como arquivo manifesto, centralizando todas as informações necessárias para entender os componentes de um projeto, por exemplo:
        Bibliotecas e dependências utilizadas em produção e desenvolvimento.
        Scripts utilizados pelo projeto para executar o projeto, como subir servidores, rodar testes, compilar arquivos para produção etc.
        Informações sobre versionamento, repositório do código, contato do time responsável.
        Informações sobre configurações diversas.
        Dados necessários para a publicação do pacote no NPM (gerenciador de pacotes do Node.js).

    Vamos entender e detalhar alguns desses atributos:

        name: é onde se define o nome pelo qual seu módulo será chamado.
        version: versão atual do módulo. O NPM utiliza o chamado versionamento semântico (SemVer). Você pode saber mais sobre versionamento e como ele é utilizado neste artigo.
        description: define o que será este módulo. É ideal que seja uma descrição curta e clara sobre o objetivo principal.
        main: define o ponto de entrada da aplicação.
        scripts: essa sessão tem alguns scripts pré-definidos, mas você também pode definir os seus personalizados. Leia sobre scripts no npm Docs ter mais informações.
        keywords: é um array de palavras-chave sobre o projeto.
        author: são dados de autoria, podendo conter nome, e-mail, site etc.
        license: é a licença escolhida para o projeto. Existem diversas opções de licenças, caso tenha curiosidade você pode conferir a lista completa de licenças no site do SPDX.
        dependencies: define a lista de pacotes necessários para executar seu projeto num ambiente de produção.
        devDependencies: define a lista de pacotes necessários para executar o projeto em um ambiente de desenvolvimento e testes. Existem outras configurações que podem existir nesse arquivo, como repositório do Git, homepage, peerDependencies, entre outras que podem ser visualizadas na documentação oficial do NPM.        

nodemon:
    "Passo 1.": com o código "npm install" , é detectado pelo servidor toda vez que alteramos o código automaticamente ao salvar o script. ao instalar ela já atualizad o packe .json com 
    "Passo 2.": no package.json, a parte de script deve ficar assim, com o código '"dev": "nodemon server.js",'
        "scripts": {
            "dev": "nodemon server.js",
            "test": "echo \"Error: no test specified\" && exit 1"
        }
    "Passo 3.": no terminal, rodar "npm run dev"
    
    


Criação de um projeto Node.js 
    com o código "npm init -y" é criadp um novo arquivo package.json,
    com algumas informações padrão, que é o que acontece quando usamos a flag (bandeira) -y.


"type": "module",
    Para importar e exportar partes, as funções, os módulos do projeto em Js, utilizando a sintaxe mais moderna do JavaScript.:
    adcionar ao package.json, abaixo de description: 
        Exemplo: 
            "type": "module"

            
    
Criação de um Servidor
    A primeira coisa que fazemos quando vamos criar uma API que precisa fornecer informações para outras partes do sistema é criar um servidor para justamente fornecer os dados, servindo como ponto de conexão.


Api:
    Portas /  portas lógicas: 
        são gerenciadas pelo sistema operacional e agem como pontos onde conexões de rede acontecem. Por exemplo, a comunicação com a API que estamos desenvolvendo se dá através da porta 3000.         são gerenciadas pelo sistema operacional e agem como pontos onde conexões de rede acontecem. Por exemplo, a comunicação com a API que estamos desenvolvendo se dá através da porta 3000.         80 é a porta padrão de conexões HTTP, usada pelos navegadores. 5432 é usada para conexão com serviços do banco de dados PostgreSQL. 3306/3307 são usadas em conexões com o banco MySQL. 587 utilizada para conexões SMTP (Simple Mail Transfer Protocol, o protocolo de envio e recebimento de e-mails).
        portas são de “uso comum” e podem ser utilizadas por qualquer serviço, como a 3000


    Header / Cabeçalho: 
        todo Header HTTP: as infos necessarios para fazer a comunicação funcionar, são elas: 
            1. Resposta de Status da resquisação 
            2. Protoculo utilizado: HTTP
            3. Host: pra onde esta sendo a requisisao (site "google.com")
            4. User-Agent:  que designa quem faz a requisição, podendo ser um navegador, o Curl (programa de terminal) ou o Postman, por exemplo
            5. accecpt: tipo de dados que serão aceitos como resposta que geralmente são de texto ou JavaScript.
        

Comandos de Requisição e Resposta:

    Res
        .writeHead(statusARetornar, "Formatação do Conteudo")    //se 
        .end("Isso aqui é o que será escrito")

        Exeplo:
            const server = http.createServer(( req, res ) =>{
                res.writeHead(200, { "Content-Type": "text/plain" });
                res.end("Curso de Node.js")

            });


Criando um Servidor Local
    Através do método createServer toda vez que o servidor HTTP receber uma requisição, a função de callback passada para o método será executada.

    Exemplo de um código{
        import http from 'http' //Importando a biblioteca nativa(/interna) do Node; ao chamar no topo do arquivo, o Node já acessa os dados dessa biblioteca.

        const port = 3000   //para deixar variavel a porta 

        //Forma 2 de consumo de rotas: utilizando o contexto da url passado, definido em end,  para utilizado no conteudo da paginá da rota.
        const rotas = {
            "/": "Curso de Express API",
            "/livros": "Entrei na rota livros",
            "/autores": "Entrei na rota autores"
        };  

        //Através do método createServer toda vez que o servidor HTTP receber uma requisição, a função de callback passada para o método será executada.
        const server = http.createServer((req, res) => {
            res.writeHead(200, { "Content-Type": "text/plain" });
            res.end(rotas[req.url]);
        });

        //Forma 1 de consumo de rotas, mais simples: definido explicitamente em end, o conteúdo da página.
        // const server = http.createServer(( req, res ) =>{
        //     res.writeHead(200, { "Content-Type": "text/plain" });   //Este método é referente ao cabeçalho (ou header) da requisição HTTP.  //Toda comunicação HTTP, tanto a requisição quanto a resposta, tem cabeçalhos. Os cabeçalhos contêm todas as informações necessárias para que a comunicação funcione corretamente.// Nele há informações contidas como: o Host para o qual a requisição é feita; o User-Agent, que designa quem faz a requisição, podendo ser um navegador, o Curl (programa de terminal) ou o Postman, por exemplo; e o tipo de dado aceito na requisição (Accept), que nesse caso, pode ser texto ou JavaScript.
        //     res.end("C
        
        urso de Node.js")
        // });


        //O método listen é o que vai definir o endereço no qual o servidor vai ficar escutando as requisições e geralmente já o chamamos depois do servidor estar criado
        server.listen(port , () => 
            console.log("Servidor Escutando!")
        )
    }


Express



REST : Representação de Estado de Transferencia: Cominucação Distribuida

    Modelo de CLiente servidor

    STATELESSNESS

    JWT: código de dados de identificação

    interface uniforme
    Recursos devem ser identificaveis

    Manipulação de recursos devem ser 


    REST(Representational State Transfer, que significa Transferência Representacional de Estado) é um modelo de arquitetura e não uma linguagem ou tecnologia de programação, que fornece diretrizes para que os sistemas distribuídos se comuniquem diretamente usando os princípios e protocolos existentes da Web sem a necessidade de SOAP ou outro protocolo sofisticado.

    A origem do termo REST
    Os conceitos do REST foram submetidos à tese de doutorado de Roy Fielding nos anos 2000, onde o princípio fundamental é usar o protocolo HTTP para comunicação de dados.

    Esta arquitetura usa várias representações de recursos para representar seu tipo, como XML, JSON, Texto, Imagens e assim por diante.
    Vale ressaltar que o REST não se limita a solicitações e respostas de registros. Também é possível inserir um novo registro ou deletar um já existente.

    Responsabilidades no REST
    Existe no REST um princípio chamado STATELESSNESS (sem estado), onde o servidor não precisa saber em qual estado o cliente está e vice-versa. Mas o que é um servidor e um cliente?

    Cliente: é o componente solicitante de um serviço e envia solicitações para vários tipos de serviços ao servidor.

    Servidor: É o componente que é o provedor de serviços e fornece continuamente serviços ao cliente conforme as solicitações

    Nesta arquitetura ou modelo, cliente-servidor ajuda na separação de responsabilidades entre a interface do usuário e o armazenamento de dados. Ou seja, quando uma solicitação REST é realizada, o servidor envia uma representação dos estados que foram requeridos.

    Não há limite superior no número de clientes que podem ser atendidos por um único servidor. Também não é obrigatório que o cliente e o servidor residam em sistemas separados.

    A comunicação entre cliente e servidor ocorre através da troca de mensagens usando um padrão de solicitação-resposta. O cliente basicamente envia uma solicitação de serviço e o servidor retorna uma resposta.

    Requisições e comunicações
    O REST precisa que um cliente faça uma requisição para o servidor para enviar ou modificar dados. Um requisição consiste em:

    Um verbo ou método HTTP, que define que tipo de operação o servidor vai realizar;
    Um header, com o cabeçalho da requisição que passa informações sobre a requisição;
    Um path (caminho ou rota) para o servidor, como por exemplo https://www.alura.com.br/artigos/golang-trabalhando-com-datas;
    Informação no corpo da requisição, sendo esta informação opcional.
    Métodos HTTP
    Em aplicação REST, os métodos mais utilizados são:

    O método GET é o método mais comum, geralmente é usado para solicitar que um servidor envie um recurso;
    O método POST foi projetado para enviar dados de entrada para o servidor. Na prática, é frequentemente usado para suportar formulários HTML;
    O método PUT edita e atualiza documentos em um servidor;
    O método DELETE que como o próprio nome já diz, deleta certo dado ou coleção do servidor.
    Neste link você encontrará a lista completa de todos os métodos.

    Códigos de Respostas
    Cada resposta que a aplicação REST retorna, é enviado um código definindo o status da requisição. Por exemplo:

    200 (OK), requisição atendida com sucesso;
    201 (CREATED), objeto ou recurso criado com sucesso;
    204 (NO CONTENT), objeto ou recurso deletado com sucesso;
    400 (BAD REQUEST), ocorreu algum erro na requisição (podem existir inumeras causas);
    404 (NOT FOUND), rota ou coleção não encontrada;
    500 (INTERNAL SERVER ERROR), ocorreu algum erro no servidor.
    Estes são os principais, porém neste link você encontrará a lista completa do código de cada requisição.

// Diagrama de Fluxo das APIs Rest com Express com MVC
    desde a requisição HTTP até a consulta (query) feita ao banco de dados. A comunicação entre as camadas de model e controller é uma caminho de ida e volta, pois o model vai repassar o resultado da consulta para o controller para que seja processada e transformada na resposta HTTP no formato adequado e com as informações esperadas.

    1. Requisição da Rota \Livros;
    2. Rota \Livros chama o controller de Livros, repassando os parametros da requisição;
    3. Controller de Livros ( que contém a função que chama a Listagem de Livros ), Processa a requisição e chama o Modelo(Model Livros);
    4. O Modelo de Livros conecta com o banco de dados, no caso MongoDb
    5. O MongoDB e processa a query(consulta), e devolve a resposta da requisição ao Modelo ;
    6. o Modelo processa o resultado e repassa ao controller
    7. O controller, monta a resposta HTTP para o Cliente
    8. Envio da Resposta HTTP pro cliente pelo controller.

    Requisição da Rota \Livros -> controller de Livros -> O Modelo de Livros -> Banco de Dados(MongoDB) -> Retorno ao Modelo -> Retorno ao Controller -> retorno ao Cliente
    


//CONCEITOS APRENDIDOS
    Como os bancos de dados atuam integrados a uma API, guardando os dados recebidos e processados pela API;
    Quais são as principais diferenças entre tipos de bancos de dados SQL e NoSQL e alguns casos de uso de cada tipo de banco;
    Como utilizar uma instância gratuita de um banco MongoDB na nuvem através do serviço Mongo Atlas e conectar a instância com a API;
    Os conceitos de model e schema e qual a função de cada na construção de uma API.


MONGOOSE:

    NOÇÕES BASICAS DE MONGOOSE COM EXEMPLOS:
        Nesta aula conhecemos os models e criamos um model para livros utilizando os métodos do Mongoose.

        Vamos revisar o código do modelo e do schema correspondente.

        No arquivo src/models/Livro.js

        Importe o módulo mongoose;
        Crie um esquema chamado livroSchema usando o construtor mongoose.Schema;
        Defina as seguintes propriedades no esquema:
        id como tipo mongoose.Schema.Types.ObjectId;
        titulo como tipo String e obrigatório;
        editora como tipo String;
        preco como tipo Number;
        paginas como tipo Number.
        Passe um objeto como segundo parâmetro para mongoose.Schema com a propriedade versionKey definida como false;
        Crie um modelo chamado livro usando o método mongoose.model, passando a string livros como nome da coleção e o esquema livroSchema;
        Exporte o modelo livro como default (padrão).    

    ERROS DE MONGOOSE:
        Se, ao invés dos dados solicitados (por exemplo, um array de objetos ou um objeto livro), alguma das variáveis estiver retornando o valor Promise { <pending> }, é possível que exista alguma promessa não resolvida em alguma parte do código.

        Verifique se todas as funções assíncronas do projeto, em especial as que fazem chamadas a métodos do Mongoose, estão devidamente assinaladas com async/await. Por exemplo:

        app.get('/livros', async (req, res) => {
        const listaLivros = await livro.find({});
        res.status(200).json(listaLivros);
        });
        COPIAR CÓDIGO
        Note que, no caso de funções callback, a palavra-chave async deve ser adicionada antes dos parâmetros e await antes da instrução da variável.

        No caso de declarações de função, async deve ser adicionada antes de function:

        async function conectaNaDatabase() {
        mongoose.connect(process.env.DB_CONNECTION_STRING);
        return mongoose.connection;
        }
        COPIAR CÓDIGO
        Note que, no exemplo acima, não é necessário adicionar await pois return já é implicitamente assíncrono.

        Em caso de dúvidas, basta consultar os commits feitos no repositório do curso no GitHub.

        Nome do banco
        Não esqueça de adicionar o nome da database livraria na string de conexão do Mongo Atlas, após o caminho principal, conforme feito em vídeo:

        mongodb+srv://admin:<suasenha>@cluster0.uvmwiwx.mongodb.net/livraria?retryWrites=true&w=majority
        COPIAR CÓDIGO
        Isso garante que a conexão será feita para a database correta e a coleção livros será criada nesta database, especialmente se você tiver outras databases de teste em seu cluster.        




| 	|               	**Embedding**               	|
|:---:|:-------------------------------------------------:|
| PRO | Dados retornados em uma única consulta        	|
| PRO | atualização e exclusão de dados em única operação |
| CON | duplicação de dados                           	|
| CON | documentos maiores                            	|
| 	|              	**Referencing**              	|
| PRO | Não há duplicação de dados                    	|
| PRO | documentos menores                            	|
| CON | necessário "unir" dados de múltiplos documentos   |


Criando uma Base de Dados no MongoDB
    1. Tenha uma conta no MongoDB
    2. Crie um projeto 
    3. Clique em Create Deployment
    4. Selecione o Template Cluster de configuração M0 é a camada gratuita do MongoDB Atlas, frequentemente usada para aprendizado, desenvolvimento e testes.
    5. Defina o Nome do Template Cluster e clique em Create.     //Um cluster no MongoDB é usado para fornecer escalabilidade, alta disponibilidade e tolerância a falhas. Ele consiste em vários servidores que desempenham papéis específicos dentro do ambiente.
    6. Na próxima pagina, defina o nome de user e senha e crie o usuario. //abnermcunha11 e u4xYygXnxvpwZfqB
    7. Ainda nesta pagina, na seção "Add entries to your IP Access List"(Lista de acesso de IPs), adicione o seu Endereço de IP Atual 
    8. Criado o IP e User, finalize o processo. Agora ele abrirá o overview do Cluster criado.
    9. Clique em Connectar e então em Drivers e Selecione o driver Node.js, e a versão estavel sugerida.
    10. Instale no terminal do projeto o "npm install mongodb"
    11. Copie a string de conexao com o banco "mongodb+srv://abnermcunha11:<password>@clusteroutro.0rjfjjj.mongodb.net/?retryWrites=true&w=majority"
    12. Substitua <senha> pela senha do usuário abnermcunha11. 
    13.1 poderia definir a string de conexão diretamente em mongoose.connect na função asincrona conectaNaDatabase, porém isso deixaria a applicação insegura com relação ao BD. exemplo: mongoose.connect("mongodb+srv://abnermcunha11:senha123@clusteroutro.0rjfjjj.mongodb.net/?retryWrites=true&w=majority");

    13.2 Por isso, é possivel censurar partes do código ao subir p/ o github, com VARIAVEIS DE AMBIENTE: 
    VARIAVEIS DE AMBIENTE: são utilizadas para esconder dados sensiveis da aplicação, como senhas de conexão de banco de dados da empresa. Para isso siga:
    13.2.1. Instalar o .env que é onde se declara VARIAVEIS DE AMBIENTE. no terminal deve ser executado:
    Exemplo: npm instal dotenv
    13.2.2. Criar arquivo .env , na raiz do projeto, no mesmo, nível do .gitignore.
    13.2.3. declarar o nome da variavél, recomendado é em CAPS LOCK, seguido de "="(igual), concatenando com a variavel de ambiente, sem aspas:
    Exemplo: DB_CONNECTION_STRING=mongodb+srv://admin:MINHASENHA@cluster0.em8fsdi.mongodb.net/livraria?retryWrites=true&w=majority
    13.2.4. No arquivo de conexão(dbConnect.js), defina no metodo connect do mongoose, dentro do parenteses, a variavel de ambiente.
    Exemplo: mongoose.connect(process.env.DB_CONNECTION_STRING);
    13.2.5. Adicionar o arquivo .env no .gitignore, para que seja omitido ao subir no github.
    Exemplo: node_modules .env
    13.2.6. É necessário iniciar o .env no ponto mais externo da aplicação(o primeiro a ser acessado na pasta do projeto).
    13.2.7 No nosso caso, o ponto mais externo é o server.js, que está na pasta raiz "src".
    No início desse arquivo server.js, acima da linha de importação do app,importe o .env utilizando o comando abaixo.
    Exemplo: import "dotenv/config".
    14. Se estiver utilizando o eslint, altere a configuração para poder utilizar as variaveis de ambiente sem aparecer erros indicando  : "37:20  error  'process' is not defined  no-undef"
    alterar de { "browser" : true, } para node recebendo true ao configurar as variaveis de ambiente, em .eslintrc.json

        Exemplo de Aplicação utilizando essa config. 
             mongoose.connect(process.env.DB_CONNECTION_STRING);    //passando a configuração 

Status Code HTTP
    Respostas Informativas (100 – 199)
    Respostas bem-sucedidas (200 – 299)
    Mensagens de redirecionamento (300 – 399)
    Respostas de erro do cliente (400 – 499)
    Respostas de erro do servidor (500 – 599)